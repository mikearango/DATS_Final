plotCategorical('bsmt.exposure', df)
plotCategorical('bsmtfin.type.1', df)
plotCategorical('bsmtfin.type.2', df)
plotCategorical('heating', df)
plotCategorical('heating.qc', df)
plotCategorical('central.air', df)
df$roof.matl <- ifelse(df$roof.matl == 'CompShg', 'CompShg', 'Other')
df$heating <- ifelse(df$heating == 'GasA' | df$heating =='GasW', df$heating, 'Other')
table(df$electrical)
# shorten to SB
index <- which(df$electrical == "SBrkr")
df[index, 'electrical'] <- "SB"
# shorten to FA
index <- which(df$electrical == "FuseA")
df[index, 'electrical'] <- "FA"
# Shorten to FF
index <- which(df$electrical == "FuseF")
df[index, 'electrical'] <- "FF"
# shorten to FP
index <- which(df$electrical == "FuseP")
df[index, 'electrical'] <- "FP"
# shorten to M
index <- which(df$electrical == "Mix")
df[index, 'electrical'] <- "M"
#New category names
table(df$electrical)
# Figure out what is going on here *******
index <- which(df$electrical == "")
df[index, 'electrical'] <- "SB"
summary(df$x1st.flr.sf)
sort.area <- df[order(df$gr.liv.area),]
head(subset(sort.area, select = c(x, x1st.flr.sf, gr.liv.area)))
knitr::opts_chunk$set(echo = TRUE)
library(gdata)
library(tidyverse)
library(stringr)
library(lubridate)
library(scales)
#Included alternate version of the read.xls routine to handle the pointer to perl; will remove once we get to the bottom of the issue
#
#df <- read.xls('./data/AmesHousing.xls', stringsAsFactors = FALSE, perl = "C:/Strawberry/perl/bin/perl.exe")
df <- read.xls('./data/AmesHousing.xls', stringsAsFactors = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(gdata)
library(tidyverse)
library(stringr)
library(lubridate)
library(scales)
#Included alternate version of the read.xls routine to handle the pointer to perl; will remove once we get to the bottom of the issue
#
df <- read.xls('./data/AmesHousing.xls', stringsAsFactors = FALSE, perl = "C:/Strawberry/perl/bin/perl.exe")
#df <- read.xls('./data/AmesHousing.xls', stringsAsFactors = FALSE)
glimpse(df)
names(df) <- tolower(names(df))
# drop the order variable
df <- df %>%
dplyr::select(everything(), -order)
names(df)
# Are there any missing values in the data
any(is.na(df))
# How many are there
sum(is.na(df))
# return index of columns that have missing values
na.cols = which(colSums(is.na(df)) > 0)
# Break down missing values by variable
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
# This is a helper function to plot the categorical variables in the dataset
plotCategorical = function(cols, dataframe) {
for (col in cols) {
# Remove NA's & sort categories by tally
order.cols = names(sort(table(df[,col]), decreasing = TRUE))
# qplot is ggplot's equivalent of base R's high-level plotting function `plot`
num.plot = qplot(dataframe[,col]) +
# change bar color
geom_bar(fill = 'cornflowerblue') +
# add the value labels to each bar
geom_text(aes(label = ..count..), stat='count', vjust=-0.5) +
# minimal theme
theme_minimal() +
# set scales for each plot to go from 0 to max of categorical feature
scale_y_continuous(limits = c(0,max(table(dataframe[,col]))*1.1)) +
scale_x_discrete(limits = order.cols) +
xlab(col) +
# rotate x-axis label text 30 degrees and set font size to 12
theme(axis.text.x = element_text(angle = 30, size=12))
# Show plot and suppress warning messages from plot function
suppressWarnings(print(num.plot))
}
}
summarise(df,
n_obs = n(),
n_pid = n_distinct(pid))
df <- df %>%
dplyr::select(everything(), -pid)
table(df$ms.subclass)
table(df$ms.zoning)
# shorten to A
index <- which(df$ms.zoning == "A (agr)")
df[index, 'ms.zoning'] <- "A"
# shorten to C
index <- which(df$ms.zoning == "C (all)")
df[index, 'ms.zoning'] <- "C"
# Shorten to I
index <- which(df$ms.zoning == "I (all)")
df[index, 'ms.zoning'] <- "I"
# results
table(df$ms.zoning)
df %>%
group_by(ms.zoning) %>%
summarise(n = n(),
median_year_built = median(year.built),
median_sale_price = median(saleprice)) %>%
arrange(desc(median_sale_price))
library(graphics)
plot(df$year.built, df$saleprice, type = "n", axes = FALSE, main = "Scatter Plot of Year Built and Sale Price", xlab = "Year Built", ylab = "Sale Price")
points(df$year.built, df$saleprice, pch = 1)
index <- which(df$ms.zoning %in% c("A", "I", "C"))
points(df$year.built[index], df$saleprice[index], pch = 16, col = "red")
legend("topleft", pch = c(1, 16), col = c('black', 'red'), legend = c("Residential", "Non-Residential"), title = "Zoning Classification")
axis(2, at = axTicks(2), labels = formatC(axTicks(2), format = 'd'), las = 0)
axis(1, at = axTicks(1), labels = format(axTicks(1)))
summary(df$lot.frontage)
index <- which(is.na(df$lot.frontage))
head(df[index,])
table(df[index, 'neighborhood'])
# Check to see if any neighborhood data is missing first
any(is.na(df$neighborhood))
# df for the imputation data
frontage_by_hood <- df %>%
dplyr::select(neighborhood, lot.frontage) %>%
group_by(neighborhood) %>%
summarise(median_frontage = median(lot.frontage, na.rm = TRUE))
# Any missing data in new df?
any(is.na(frontage_by_hood$median_frontage))
# Which ones are missing?
index2 <- which(is.na(frontage_by_hood$median_frontage))
frontage_by_hood[index2, ]
# how many properties is this?
df %>%
filter(neighborhood == "GrnHill" | neighborhood == "Landmrk") %>%
count()
# drop these 3 observations ---- Note we dropped observations here
df <- df %>%
filter(neighborhood != "GrnHill" & neighborhood != "Landmrk")
# drop from frontage df as well
frontage_by_hood <- frontage_by_hood %>%
filter(neighborhood != "GrnHill" & neighborhood != "Landmrk")
# redefine index for missing frontage data
index <- which(is.na(df$lot.frontage))
# for loop for imputation
# select neighborhood from first column of frontage df based on the corresponding neighborhood
# in the original df and return the median frontage for that neighborhood
for (i in index) {
med_frontage = frontage_by_hood[frontage_by_hood == df$neighborhood[i], 'median_frontage']
# then replace the missing value with the median
df[i, 'lot.frontage'] = med_frontage[[1]]
}
# check to see that it worked
any(is.na(df$lot.frontage))
ggplot(df, aes(x = log(lot.frontage), y = saleprice)) + geom_point() + geom_smooth(method = "lm")
df$ln.lot.frontage <- log(df$lot.frontage)
# scatter plot vs sale price
ggplot(df, aes(x = lot.area, y = saleprice)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "lm") +
scale_y_continuous(labels = dollar)
# distribution of lot area
summary(df$lot.area)
# ln lot area
ggplot(df, aes(x = log(lot.area), y = saleprice)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "lm") +
scale_y_continuous(labels = dollar)
# add variable
df$ln.lot.area <- log(df$lot.area)
plotCategorical('street', df)
df %>%
group_by(street) %>%
summarise(median_sale_price = median(saleprice),
n = n())
index <- which(is.na(df$alley))
df[index, 'alley'] <- 'No Alley'
plotCategorical('lot.shape', df)
# median sale price by lot shape
df %>%
group_by(lot.shape) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
# Combine IR2 and IR3 into one level
index <- which(df$lot.shape == "IR2" | df$lot.shape == "IR3")
df[index, 'lot.shape'] <- "Mod+ IR"
# New median sale price by lot shape
df %>%
group_by(lot.shape) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
plotCategorical('land.contour', df)
df %>%
group_by(land.contour) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
plotCategorical('utilities', df)
df %>%
group_by(utilities) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
# find the 3 non-allpub utility houses
index <- which(df$utilities != "AllPub")
df[index, ]
# We are going to drop these 3 houses
df <- df[-index, ]
# Now we drop the utitlity variable
df <- df %>%
dplyr::select(everything(), -utilities)
plotCategorical("lot.config", df)
# look at median sale price by lot configuration
df %>%
group_by(lot.config) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
plotCategorical("land.slope", df)
# median sale price by slope
df %>%
group_by(land.slope) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
# combine moderate and severe land slope into 1 level
index <- which(df$land.slope != "Gtl")
df[index, "land.slope"] <- "Not Gtl"
# new plot
plotCategorical("land.slope", df)
# new table
df %>%
group_by(land.slope) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
# boxplot of neighborhood and saleprice
ggplot(df, aes(x = neighborhood, y = saleprice)) +
geom_boxplot(fill = "#81AC9B") +
theme(axis.text.x = element_text(angle = 90, size = 8), legend.position = "none") +
scale_y_continuous(labels = dollar)
# creat median sale price by neighborhood
tbl <- df %>%
group_by(neighborhood) %>%
summarise(median_saleprice = median(saleprice))
# plot tbl
ggplot(tbl, aes(x = neighborhood, y = median_saleprice)) +
geom_bar(stat = 'identity', fill = "#81AC9B") +
scale_y_continuous(labels = dollar) +
theme(axis.text.x = element_text(angle = 90, size = 8), legend.position = "none") +
labs(x = 'Neighborhood', y = 'Median Sale Price')
plotCategorical('condition.1', df)
# median sale price by condition 1
df %>%
group_by(condition.1) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
plotCategorical('condition.2', df)
df %>%
group_by(condition.2) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
# No case where first condition is norm and second isn't
any(df$condition.1 == "Norm" & df$condition.2 != "Norm")
plotCategorical('bldg.type', df)
df %>%
group_by(bldg.type) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
plotCategorical('house.style', df)
df %>%
group_by(house.style) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
df <- df %>% dplyr::select(everything(), -ms.subclass)
# df to store median sale price of overall qual
tbl <- df %>%
group_by(overall.qual) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
#
ggplot(tbl, aes(x = factor(overall.qual), y = median_saleprice)) +
geom_bar(stat = 'identity', fill = "#81AC9B") +
scale_y_continuous(labels = dollar) +
theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +
labs(x = 'Overall House Quality', y = 'Median Sale Price')
ggplot(df, aes(x = factor(overall.qual), y = saleprice)) +
geom_boxplot(fill = "#81AC9B") +
theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +
scale_y_continuous(labels = dollar) +
scale_x_discrete("Overall Quality")
ggplot(df, aes(x = factor(overall.cond), y = saleprice)) +
geom_boxplot(fill = "#788BBD") +
theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +
scale_y_continuous(labels = dollar) +
scale_x_discrete("Overall Condition")
# df to see median sale price for overall condition
tbl <- df %>%
group_by(overall.cond) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
# plot house condition and median sale price
ggplot(tbl, aes(x = factor(overall.cond), y = median_saleprice)) +
geom_bar(stat = 'identity', fill = "#788BBD") +
scale_y_continuous(labels = dollar) +
theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +
labs(x = 'Overall House Condition', y = 'Median Sale Price')
df$house.age <- df$yr.sold - df$year.built
summary(df$house.age)
index <- which(df$house.age < 0)
df[index, ]
df$yrs.since.remod <- df$yr.sold - df$year.remod.add
summary(df$yrs.since.remod)
index <- which(df$yrs.since.remod < 0)
df[index, ]
plotCategorical('pool.qc', df)
df[(df$pool.area > 0) & is.na(df$pool.qc), c('pool.qc','pool.area')]
index <- which(is.na(df$pool.qc))
df[index, 'pool.qc'] <- 'No Pool'
start <- which(colnames(df) == 'roof.style')
end <- which(colnames(df) == 'central.air')
colnames_yesh <- colnames(df[, start:end])
colnames_yesh
print(paste('Total NAs: ', sum(is.na(df[start:end]))))
colnamesWithNA_yesh <- NULL
for(i in colnames_yesh) {
print(paste0(i, ': ', sum(is.na(df[, i]))))
if(sum(is.na(df[, i])) > 0) {
colnamesWithNA_yesh <- append(colnamesWithNA_yesh, i)
}
}
colnamesWithNA_yesh
bsmtNAfunction <- function(x){
if(is.na(x[10]) & is.na(x[11]) & is.na(x[12]) & is.na(x[13]) & is.na(x[15]) ){
TRUE
} else {
FALSE
}
}
#apply the function to assigned variables for cleaning section
noBasmentLogical <- apply(df[,start:end], 1, bsmtNAfunction)
# 78 observations have no basement for all 5 categories.
table(noBasmentLogical)
# replace NA's with "No Basement"
df[, c('bsmt.qual','bsmt.cond','bsmt.exposure','bsmtfin.type.1','bsmtfin.type.2')][is.na(df[, c('bsmt.qual','bsmt.cond','bsmt.exposure','bsmtfin.type.1','bsmtfin.type.2')])] <- "No Basement"
# remove fixed columns from list
colnamesWithNA_yesh <- colnamesWithNA_yesh[! (colnamesWithNA_yesh %in% c('bsmt.qual','bsmt.cond','bsmt.exposure','bsmtfin.type.1','bsmtfin.type.2'))]
# calculate number of dropped observations
obsDropped <- dim(df)[1] - dim(df[complete.cases(df[,colnamesWithNA_yesh]),])[1]
df <- df[complete.cases(df[,colnamesWithNA_yesh]),]
plotCategorical('roof.style', df)
plotCategorical('roof.matl', df)
plotCategorical('exterior.1st', df)
plotCategorical('exterior.2nd', df)
plotCategorical('exter.qual', df)
plotCategorical('exter.cond', df)
plotCategorical('bsmt.qual', df)
plotCategorical('bsmt.cond', df)
plotCategorical('bsmt.exposure', df)
plotCategorical('bsmtfin.type.1', df)
plotCategorical('bsmtfin.type.2', df)
plotCategorical('heating', df)
plotCategorical('heating.qc', df)
plotCategorical('central.air', df)
# Change roof.matl to CompShg and Other
df$roof.matl <- ifelse(df$roof.matl == 'CompShg', 'CompShg', 'Other')
# check median sale price by heating type
df %>% group_by(heating) %>% summarise(median(saleprice))
# Combine Hot Water sources
index <- which(df$heating == "GasW" | df$heating == "OthW")
df[index, 'heating'] <- "HotW"
# make all else other
index <- which(df$heating != "GasA" & df$heating != "HotW")
df[index, 'heating'] <- "Other"
df %>% group_by(bsmt.exposure) %>% summarise(median(saleprice))
# change no -> no basement
index <- which(df$bsmt.exposure == "No")
df[index, 'bsmt.exposure'] <- "No Exposure"
# look again
df %>% group_by(bsmt.exposure) %>% summarise(median(saleprice))
# drop observations for basement exposure which are not labeled
index <- which(df$bsmt.exposure == "")
df <- df[-index, ]
table(df$electrical)
# shorten to SB
index <- which(df$electrical == "SBrkr")
df[index, 'electrical'] <- "SB"
# shorten to FA
index <- which(df$electrical == "FuseA")
df[index, 'electrical'] <- "FA"
# Shorten to FF
index <- which(df$electrical == "FuseF")
df[index, 'electrical'] <- "FF"
# shorten to FP
index <- which(df$electrical == "FuseP")
df[index, 'electrical'] <- "FP"
# shorten to M
index <- which(df$electrical == "Mix")
df[index, 'electrical'] <- "M"
#New category names
table(df$electrical)
# Figure out what is going on here *******
index <- which(df$electrical == "")
df[index, 'electrical'] <- "SB"
summary(df$x1st.flr.sf)
sort.area <- df[order(df$gr.liv.area),]
head(subset(sort.area, select = c(x1st.flr.sf, gr.liv.area)))
tail(subset(sort.area, select = c(x1st.flr.sf, gr.liv.area)))
summary(df$x2nd.flr.sf)
df$has.2nd.floor <- ifelse(df$x2nd.flr.sf > 0, 1, 0)
summary(df$has.2nd.floor)
#Percentage of houses that have 2 floors
a <- df %>% filter(has.2nd.floor == 1)
nrow(a) / nrow(df)
#Checking neighborhood distribution of houses with 2 floors
tall.houses <- df %>% group_by(neighborhood) %>% summarise(floors = mean(as.numeric(has.2nd.floor)))
head(tall.houses)
summary(df$low.qual.fin.sf)
no.low.qual <- df %>% filter(low.qual.fin.sf == 0)
nrow(no.low.qual) / nrow(df)
wherelow <- df %>% group_by(neighborhood) %>% filter(low.qual.fin.sf > 0) %>% summarise(n = n())
wherelow
summary(df$gr.liv.area)
head(df[order(df$gr.liv.area),] )
tail(df[order(df$gr.liv.area),] )
bath.missing <- df %>% filter(is.na(bsmt.half.bath) | is.na(bsmt.full.bath))
bath.missing
df$bsmt.full.bath[which(is.na(df$bsmt.full.bath))] <- 0
df$bsmt.half.bath[which(is.na(df$bsmt.half.bath))] <- 0
table(df$bsmt.full.bath)
table(df$bsmt.half.bath)
table(df$full.bath)
table(df$half.bath)
mutate(df, total.bath = bsmt.full.bath + full.bath + (.5 * bsmt.half.bath) + (.5 * half.bath))
summary(df$total.bath)
table(df$bedroom.abvgr)
bedless <- df %>% filter(bedroom.abvgr == 0)
bedless
#Checking how many rooms are in each sale with 0 bedrooms
bedless1 <- subset(bedless, select = c(totrms.abvgrd))
bedless1
#Comparing the basement area and above ground area of the homes with no above ground bedrooms
area.compare <- subset(bedless, select = c(total.bsmt.sf, gr.liv.area))
area.compare
test_model <- lm(totrms.abvgrd ~ bedroom.abvgr, data = df)
summary(test_model)
table(df$kitchen.abvgr)
table(df$kitchen.qual)
df[(df$kitchen.abvgr > 0) & is.na(df$kitchen.qual), ]
table(df$totrms.abvgrd)
table(df$functional)
nrow(df[(df$fireplaces > 0) & is.na(df$fireplace.qu), ])
index.fire <- which(is.na(df$fireplace.qu))
df[index.fire, 'fireplace.qu'] <- 'No Fireplace'
table(df$fireplaces)
table(df$fireplace.qu)
df[(is.na(df$garage.type) & df$garage.area > 0) | (is.na(df$garage.type) & df$garage.cars > 0) , ]
table(as.factor(df$garage.type))
# shorten to 2T
index <- which(df$garage.type == "2Types")
df[index, 'garage.type'] <- "2T"
# shorten to A
index <- which(df$garage.type == "Attchd")
df[index, 'garage.type'] <- "A"
# Shorten to BM
index <- which(df$garage.type == "Basment")
df[index, 'garage.type'] <- "BM"
# shorten to BI
index <- which(df$garage.type == "BuiltIn")
df[index, 'garage.type'] <- "BI"
# shorten to CP
index <- which(df$garage.type == "CarPort")
df[index, 'garage.type'] <- "CP"
# Shorten to I
index <- which(df$garage.type == "Detchd")
df[index, 'garage.type'] <- "D"
#New factor names
table(as.factor(df$garage.type))
summary(df$garage.yr.blt)
missing.garage.year <- df %>% filter(is.na(garage.yr.blt) & !is.na(garage.type))
missing.garage.year
# 1357 and 2237 have missing garage data
#Change garage year to integer for filtering
df$garage.yr.blt <- as.integer(df$garage.yr.blt)
#Get all garage with a build year later than 2010
future.garage <- df %>% filter(garage.yr.blt > 2010)
future.garage
#Only found one
#Change value of garage year from 2207 to 2007
df$garage.yr.blt[df$garage.yr.blt == "2207"] <- "2007"
#Confirm results
table(df$garage.yr.blt)
summary(as.factor(df$garage.finish))
df[is.na(df$garage.finish) & !is.na(df$garage.type), ]
summary(df$garage.cars)
df %>% filter(is.na(garage.cars))
summary(df$garage.area)
df %>% filter(is.na(garage.area))
summary(as.factor(df$garage.qual))
df %>% filter(is.na(garage.finish) & !is.na(garage.type))
df %>% filter(is.na(garage.qual) & !is.na(garage.type))
df %>% filter(is.na(garage.cond) & !is.na(garage.type))
summary(as.factor(df$garage.cond))
index.garage.type <- which(is.na(df$garage.type))
df[index.garage.type, 'garage.type'] <- 'None'
index.garage.finish <- which(is.na(df$garage.finish))
df[index.garage.finish, 'garage.finish'] <- 'None'
index.garage.qual <- which(is.na(df$garage.qual))
df[index.garage.qual, 'garage.qual'] <- 'None'
index.garage.cond <- which(is.na(df$garage.cond))
df[index.garage.cond, 'garage.cond'] <- 'None'
df <- df %>% filter(x != 2237)
