knitr::opts_chunk$set(echo = TRUE)
library(gdata)
install.packages("gdata")
knitr::opts_chunk$set(echo = TRUE)
library(gdata)
library(tidyverse)
install.packages("tidyverse")
install.packages("stringr")
install.packages("lubridate")
install.packages("scales")
knitr::opts_chunk$set(echo = TRUE)
library(gdata)
library(tidyverse)
library(stringr)
library(lubridate)
library(scales)
df <- read.xls('./data/AmesHousing.xls', stringsAsFactors = FALSE) #na.strings = "EMPTY"
glimpse(df)
names(df) <- tolower(names(df))
# drop the order vairiable
df <- df %>%
dplyr::select(everything(), -order)
names(df)
# Are there any missing values in the data
any(is.na(df))
# How many are there
sum(is.na(df))
# return index of columns that have missing values
na.cols = which(colSums(is.na(df)) > 0)
# Break down missing values by variable
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
# This is a helper function to plot the categorical variables in the dataset
plotCategorical = function(cols, dataframe) {
for (col in cols) {
# Remove NA's & sort categories by tally
order.cols = names(sort(table(df[,col]), decreasing = TRUE))
# qplot is ggplot's equivalent of base R's high-level plotting function `plot`
num.plot = qplot(dataframe[,col]) +
# change bar color
geom_bar(fill = 'cornflowerblue') +
# add the value labels to each bar
geom_text(aes(label = ..count..), stat='count', vjust=-0.5) +
# minimal theme
theme_minimal() +
# set scales for each plot to go from 0 to max of categorical feature
scale_y_continuous(limits = c(0,max(table(dataframe[,col]))*1.1)) +
scale_x_discrete(limits = order.cols) +
xlab(col) +
# rotate x-axis label text 30 degrees and set font size to 12
theme(axis.text.x = element_text(angle = 30, size=12))
# Show plot and suppress warning messages from plot function
suppressWarnings(print(num.plot))
}
}
summarise(df,
n_obs = n(),
n_pid = n_distinct(pid))
df <- df %>%
dplyr::select(everything(), -pid)
table(df$ms.subclass)
table(df$ms.zoning)
# shorten to A
index <- which(df$ms.zoning == "A (agr)")
df[index, 'ms.zoning'] <- "A"
# shorten to C
index <- which(df$ms.zoning == "C (all)")
df[index, 'ms.zoning'] <- "C"
# Shorten to I
index <- which(df$ms.zoning == "I (all)")
df[index, 'ms.zoning'] <- "I"
# results
table(df$ms.zoning)
df %>%
group_by(ms.zoning) %>%
summarise(n = n(),
median_year_built = median(year.built),
median_sale_price = median(saleprice)) %>%
arrange(desc(median_sale_price))
library(graphics)
plot(df$year.built, df$saleprice, type = "n", axes = FALSE, main = "Scatter Plot of Year Built and Sale Price", xlab = "Year Built", ylab = "Sale Price")
points(df$year.built, df$saleprice, pch = 1)
index <- which(df$ms.zoning %in% c("A", "I", "C"))
points(df$year.built[index], df$saleprice[index], pch = 16, col = "red")
legend("topleft", pch = c(1, 16), col = c('black', 'red'), legend = c("Residential", "Non-Residential"), title = "Zoning Classification")
axis(2, at = axTicks(2), labels = formatC(axTicks(2), format = 'd'), las = 0)
axis(1, at = axTicks(1), labels = format(axTicks(1)))
summary(df$lot.frontage)
index <- which(is.na(df$lot.frontage))
head(df[index,])
table(df[index, 'neighborhood'])
# Check to see if any neighborhood data is missing first
any(is.na(df$neighborhood))
# df for the imputation data
frontage_by_hood <- df %>%
dplyr::select(neighborhood, lot.frontage) %>%
group_by(neighborhood) %>%
summarise(median_frontage = median(lot.frontage, na.rm = TRUE))
# Any missing data in new df?
any(is.na(frontage_by_hood$median_frontage))
# Which ones are missing?
index2 <- which(is.na(frontage_by_hood$median_frontage))
frontage_by_hood[index2, ]
# how many properties is this?
df %>%
filter(neighborhood == "GrnHill" | neighborhood == "Landmrk") %>%
count()
# drop these 3 observations ---- Note we dropped observations here
df <- df %>%
filter(neighborhood != "GrnHill" & neighborhood != "Landmrk")
# drop from frontage df as well
frontage_by_hood <- frontage_by_hood %>%
filter(neighborhood != "GrnHill" & neighborhood != "Landmrk")
# redefine index for missing frontage data
index <- which(is.na(df$lot.frontage))
# for loop for imputation
# select neighborhood from first column of frontage df based on the corresponding neighborhood
# in the original df and return the median frontage for that neighborhood
for (i in index) {
med_frontage = frontage_by_hood[frontage_by_hood == df$neighborhood[i], 'median_frontage']
# then replace the missing value with the median
df[i, 'lot.frontage'] = med_frontage[[1]]
}
# check to see that it worked
any(is.na(df$lot.frontage))
ggplot(df, aes(x = log(lot.frontage), y = log(saleprice))) + geom_point() + geom_smooth(method = "lm")
df$ln.lot.frontage <- log(df$lot.frontage)
# scatter plot vs sale price
ggplot(df, aes(x = lot.area, y = saleprice)) + geom_point() + geom_smooth(method = "lm")
# distribution of lot area
summary(df$lot.area)
# ln lot area
ggplot(df, aes(x = log(lot.area), y = saleprice)) + geom_point() + geom_smooth(method = "lm")
# add variable
df$ln.lot.area <- log(df$lot.area)
plotCategorical('street', df)
df %>%
group_by(street) %>%
summarise(median_sale_price = median(saleprice),
n = n())
index <- which(is.na(df$alley))
df[index, 'alley'] <- 'No Alley'
plotCategorical('lot.shape', df)
df %>%
group_by(lot.shape) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
plotCategorical('land.contour', df)
df %>%
group_by(land.contour) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
plotCategorical('utilities', df)
df %>%
group_by(utilities) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
plotCategorical("lot.config", df)
df %>%
group_by(lot.config) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
plotCategorical("land.slope", df)
# median sale price by slope
df %>%
group_by(land.slope) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
ggplot(df, aes(x = neighborhood, y = saleprice)) +
geom_boxplot(aes(fill = neighborhood)) +
theme(axis.text.x = element_text(angle = 90, size = 8), legend.position = "none") +
scale_y_continuous(labels = dollar)
tbl <- df %>%
group_by(neighborhood) %>%
summarise(median_saleprice = median(saleprice))
ggplot(tbl, aes(x = neighborhood, y = median_saleprice, fill = neighborhood)) +
geom_bar(stat = 'identity') +
scale_y_continuous(labels = dollar) +
theme(axis.text.x = element_text(angle = 90, size = 8), legend.position = "none") +
labs(x = 'Neighborhood', y = 'Median Sale Price')
plotCategorical('condition.1', df)
df %>%
group_by(condition.1) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
plotCategorical('condition.2', df)
df %>%
group_by(condition.2) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
plotCategorical('bldg.type', df)
df %>%
group_by(bldg.type) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
plotCategorical('house.style', df)
df %>%
group_by(house.style) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
tbl <- df %>%
group_by(overall.qual) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
ggplot(tbl, aes(x = factor(overall.qual), y = median_saleprice, fill = factor(overall.qual))) +
geom_bar(stat = 'identity') +
scale_y_continuous(labels = dollar) +
theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +
labs(x = 'Overall House Quality', y = 'Median Sale Price')
ggplot(df, aes(x = factor(overall.qual), y = saleprice)) +
geom_boxplot(aes(fill = factor(overall.qual))) +
theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +
scale_y_continuous(labels = dollar)
ggplot(df, aes(x = factor(overall.cond), y = saleprice)) +
geom_boxplot(aes(fill = factor(overall.cond))) +
theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +
scale_y_continuous(labels = dollar)
tbl <- df %>%
group_by(overall.cond) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
ggplot(tbl, aes(x = factor(overall.cond), y = median_saleprice, fill = factor(overall.cond))) +
geom_bar(stat = 'identity') +
scale_y_continuous(labels = dollar) +
theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +
labs(x = 'Overall House Condition', y = 'Median Sale Price')
df$house.age <- df$yr.sold - df$year.built
summary(df$house.age)
index <- which(df$house.age < 0)
df[index, ]
df$yrs.since.remod <- df$yr.sold - df$year.remod.add
summary(df$yrs.since.remod)
index <- which(df$yrs.since.remod < 0)
df[index, ]
plotCategorical('pool.qc', df)
df[(df$pool.area > 0) & is.na(df$pool.qc), c('pool.qc','pool.area')]
index <- which(is.na(df$pool.qc))
df[index, 'pool.qc'] <- 'No Pool'
any(table(df$pid)>1)
start <- which(colnames(df) == 'roof.style')
end <- which(colnames(df) == 'central.air')
colnames_yesh <- colnames(df[, start:end])
colnames_yesh
print(paste('Total NAs: ',sum(is.na(df[start:end]))))
colnamesWithNA_yesh <- NULL
for(i in colnames_yesh){
print(paste0(i,': ',sum(is.na(df[, i]))))
if(sum(is.na(df[, i])) > 0){
colnamesWithNA_yesh <- append(colnamesWithNA_yesh, i)
}
}
colnamesWithNA_yesh
bsmtNAfunction <- function(x){
if(is.na(x[10]) & is.na(x[11]) & is.na(x[12]) & is.na(x[13]) & is.na(x[15]) ){
TRUE
} else {
FALSE
}
}
noBasmentLogical <- apply(df[,start:end], 1, bsmtNAfunction)
table(noBasmentLogical) # 78 observations have no basement for all 5 categories.
# replace NA's with "No Basement"
df[, c('bsmt.qual','bsmt.cond','bsmt.exposure','bsmtfin.type.1','bsmtfin.type.2')][is.na(df[, c('bsmt.qual','bsmt.cond','bsmt.exposure','bsmtfin.type.1','bsmtfin.type.2')])] <- "No Basement"
colnamesWithNA_yesh <- colnamesWithNA_yesh[! (colnamesWithNA_yesh %in% c('bsmt.qual','bsmt.cond','bsmt.exposure','bsmtfin.type.1','bsmtfin.type.2'))]
obsDropped <- dim(df)[1] - dim(df[complete.cases(df[,colnamesWithNA_yesh]),])[1]
df <- df[complete.cases(df[,colnamesWithNA_yesh]),]
plotCategorical('roof.style', df)
plotCategorical('roof.matl', df)
plotCategorical('exterior.1st', df)
plotCategorical('exterior.2nd', df)
plotCategorical('exter.qual', df)
plotCategorical('exter.cond', df)
plotCategorical('bsmt.qual', df)
plotCategorical('bsmt.cond', df)
plotCategorical('bsmt.exposure', df)
plotCategorical('bsmtfin.type.1', df)
plotCategorical('bsmtfin.type.2', df)
plotCategorical('heating', df)
plotCategorical('heating.qc', df)
plotCategorical('central.air', df)
#ggplot(data=df, aes(x=gr.liv.area, y=saleprice)) + geom_point(alpha=.25, color="#00b9be")
knitr::opts_chunk$set(echo = TRUE)
LOW_RMSE
LOW_RMSE
