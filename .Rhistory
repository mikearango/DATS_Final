theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +
labs(x = 'Overall House Quality', y = 'Median Sale Price')
ggplot(df, aes(x = factor(overall.qual), y = saleprice)) +
geom_boxplot(fill = "#81AC9B") +
theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +
scale_y_continuous(labels = dollar) +
scale_x_discrete("Overall Quality")
ggplot(df, aes(x = factor(overall.cond), y = saleprice)) +
geom_boxplot(fill = "#788BBD") +
theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +
scale_y_continuous(labels = dollar) +
scale_x_discrete("Overall Condition")
# df to see median sale price for overall condition
tbl <- df %>%
group_by(overall.cond) %>%
summarise(n = n(),
median_saleprice = median(saleprice))
# plot house condition and median sale price
ggplot(tbl, aes(x = factor(overall.cond), y = median_saleprice)) +
geom_bar(stat = 'identity', fill = "#788BBD") +
scale_y_continuous(labels = dollar) +
theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +
labs(x = 'Overall House Condition', y = 'Median Sale Price')
df$house.age <- df$yr.sold - df$year.built
summary(df$house.age)
index <- which(df$house.age < 0)
df[index, ]
df$yrs.since.remod <- df$yr.sold - df$year.remod.add
summary(df$yrs.since.remod)
index <- which(df$yrs.since.remod < 0)
df[index, ]
plotCategorical('pool.qc', df)
df[(df$pool.area > 0) & is.na(df$pool.qc), c('pool.qc','pool.area')]
index <- which(is.na(df$pool.qc))
df[index, 'pool.qc'] <- 'No Pool'
start <- which(colnames(df) == 'roof.style')
end <- which(colnames(df) == 'central.air')
colnames_yesh <- colnames(df[, start:end])
colnames_yesh
print(paste('Total NAs: ', sum(is.na(df[start:end]))))
colnamesWithNA_yesh <- NULL
for(i in colnames_yesh) {
print(paste0(i, ': ', sum(is.na(df[, i]))))
if(sum(is.na(df[, i])) > 0) {
colnamesWithNA_yesh <- append(colnamesWithNA_yesh, i)
}
}
colnamesWithNA_yesh
bsmtNAfunction <- function(x){
if(is.na(x[10]) & is.na(x[11]) & is.na(x[12]) & is.na(x[13]) & is.na(x[15]) ){
TRUE
} else {
FALSE
}
}
#apply the function to assigned variables for cleaning section
noBasmentLogical <- apply(df[,start:end], 1, bsmtNAfunction)
# 78 observations have no basement for all 5 categories.
table(noBasmentLogical)
# replace NA's with "No Basement"
df[, c('bsmt.qual','bsmt.cond','bsmt.exposure','bsmtfin.type.1','bsmtfin.type.2')][is.na(df[, c('bsmt.qual','bsmt.cond','bsmt.exposure','bsmtfin.type.1','bsmtfin.type.2')])] <- "No Basement"
# remove fixed columns from list
colnamesWithNA_yesh <- colnamesWithNA_yesh[! (colnamesWithNA_yesh %in% c('bsmt.qual','bsmt.cond','bsmt.exposure','bsmtfin.type.1','bsmtfin.type.2'))]
# calculate number of dropped observations
obsDropped <- dim(df)[1] - dim(df[complete.cases(df[,colnamesWithNA_yesh]),])[1]
df <- df[complete.cases(df[,colnamesWithNA_yesh]),]
plotCategorical('roof.style', df)
plotCategorical('roof.matl', df)
plotCategorical('exterior.1st', df)
plotCategorical('exterior.2nd', df)
plotCategorical('exter.qual', df)
plotCategorical('exter.cond', df)
plotCategorical('bsmt.qual', df)
plotCategorical('bsmt.cond', df)
plotCategorical('bsmt.exposure', df)
plotCategorical('bsmtfin.type.1', df)
plotCategorical('bsmtfin.type.2', df)
plotCategorical('heating', df)
plotCategorical('heating.qc', df)
plotCategorical('central.air', df)
# Change roof.matl to CompShg and Other
df$roof.matl <- ifelse(df$roof.matl == 'CompShg', 'CompShg', 'Other')
# check median sale price by heating type
df %>% group_by(heating) %>% summarise(median(saleprice))
# Combine Hot Water sources
index <- which(df$heating == "GasW" | df$heating == "OthW")
df[index, 'heating'] <- "HotW"
# make all else other
index <- which(df$heating != "GasA" & df$heating != "HotW")
df[index, 'heating'] <- "Other"
df %>% group_by(bsmt.exposure) %>% summarise(median(saleprice))
# change no -> no basement
index <- which(df$bsmt.exposure == "No")
df[index, 'bsmt.exposure'] <- "No Exposure"
# look again
df %>% group_by(bsmt.exposure) %>% summarise(median(saleprice))
# drop observations for basement exposure which are not labeled
index <- which(df$bsmt.exposure == "")
df <- df[-index, ]
table(df$electrical)
# shorten to SB
index <- which(df$electrical == "SBrkr")
df[index, 'electrical'] <- "SB"
# shorten to FA
index <- which(df$electrical == "FuseA")
df[index, 'electrical'] <- "FA"
# Shorten to FF
index <- which(df$electrical == "FuseF")
df[index, 'electrical'] <- "FF"
# shorten to FP
index <- which(df$electrical == "FuseP")
df[index, 'electrical'] <- "FP"
# shorten to M
index <- which(df$electrical == "Mix")
df[index, 'electrical'] <- "M"
#New category names
table(df$electrical)
# Figure out what is going on here *******
index <- which(df$electrical == "")
df[index, 'electrical'] <- "SB"
summary(df$x1st.flr.sf)
sort.area <- df[order(df$gr.liv.area),]
head(subset(sort.area, select = c(x1st.flr.sf, gr.liv.area)))
tail(subset(sort.area, select = c(x1st.flr.sf, gr.liv.area)))
summary(df$x2nd.flr.sf)
df$has.2nd.floor <- ifelse(df$x2nd.flr.sf > 0, 1, 0)
summary(df$has.2nd.floor)
#Percentage of houses that have 2 floors
a <- df %>% filter(has.2nd.floor == 1)
nrow(a) / nrow(df)
#Checking neighborhood distribution of houses with 2 floors
tall.houses <- df %>% group_by(neighborhood) %>% summarise(floors = mean(as.numeric(has.2nd.floor)))
head(tall.houses)
summary(df$low.qual.fin.sf)
no.low.qual <- df %>% filter(low.qual.fin.sf == 0)
nrow(no.low.qual) / nrow(df)
wherelow <- df %>% group_by(neighborhood) %>% filter(low.qual.fin.sf > 0) %>% summarise(n = n())
wherelow
summary(df$gr.liv.area)
head(df[order(df$gr.liv.area),] )
tail(df[order(df$gr.liv.area),] )
bath.missing <- df %>% filter(is.na(bsmt.half.bath) | is.na(bsmt.full.bath))
bath.missing
df$bsmt.full.bath[which(is.na(df$bsmt.full.bath))] <- 0
df$bsmt.half.bath[which(is.na(df$bsmt.half.bath))] <- 0
table(df$bsmt.full.bath)
table(df$bsmt.half.bath)
table(df$full.bath)
table(df$half.bath)
mutate(df, total.bath = bsmt.full.bath + full.bath + (.5 * bsmt.half.bath) + (.5 * half.bath))
summary(df$total.bath)
table(df$bedroom.abvgr)
bedless <- df %>% filter(bedroom.abvgr == 0)
bedless
#Checking how many rooms are in each sale with 0 bedrooms
bedless1 <- subset(bedless, select = c(totrms.abvgrd))
bedless1
#Comparing the basement area and above ground area of the homes with no above ground bedrooms
area.compare <- subset(bedless, select = c(total.bsmt.sf, gr.liv.area))
area.compare
test_model <- lm(totrms.abvgrd ~ bedroom.abvgr, data = df)
summary(test_model)
table(df$kitchen.abvgr)
table(df$kitchen.qual)
df[(df$kitchen.abvgr > 0) & is.na(df$kitchen.qual), ]
table(df$totrms.abvgrd)
table(df$functional)
nrow(df[(df$fireplaces > 0) & is.na(df$fireplace.qu), ])
index.fire <- which(is.na(df$fireplace.qu))
df[index.fire, 'fireplace.qu'] <- 'No Fireplace'
table(df$fireplaces)
table(df$fireplace.qu)
df[(is.na(df$garage.type) & df$garage.area > 0) | (is.na(df$garage.type) & df$garage.cars > 0) , ]
table(as.factor(df$garage.type))
# shorten to 2T
index <- which(df$garage.type == "2Types")
df[index, 'garage.type'] <- "2T"
# shorten to A
index <- which(df$garage.type == "Attchd")
df[index, 'garage.type'] <- "A"
# Shorten to BM
index <- which(df$garage.type == "Basment")
df[index, 'garage.type'] <- "BM"
# shorten to BI
index <- which(df$garage.type == "BuiltIn")
df[index, 'garage.type'] <- "BI"
# shorten to CP
index <- which(df$garage.type == "CarPort")
df[index, 'garage.type'] <- "CP"
# Shorten to I
index <- which(df$garage.type == "Detchd")
df[index, 'garage.type'] <- "D"
#New factor names
table(as.factor(df$garage.type))
summary(df$garage.yr.blt)
missing.garage.year <- df %>% filter(is.na(garage.yr.blt) & !is.na(garage.type))
missing.garage.year
# 1357 and 2237 have missing garage data
#Change garage year to integer for filtering
df$garage.yr.blt <- as.integer(df$garage.yr.blt)
#Get all garage with a build year later than 2010
future.garage <- df %>% filter(garage.yr.blt > 2010)
future.garage
#Only found one
#Change value of garage year from 2207 to 2007
df$garage.yr.blt[df$garage.yr.blt == "2207"] <- "2007"
#Confirm results
table(df$garage.yr.blt)
summary(as.factor(df$garage.finish))
df[is.na(df$garage.finish) & !is.na(df$garage.type), ]
summary(df$garage.cars)
df %>% filter(is.na(garage.cars))
summary(df$garage.area)
df %>% filter(is.na(garage.area))
summary(as.factor(df$garage.qual))
df %>% filter(is.na(garage.finish) & !is.na(garage.type))
df %>% filter(is.na(garage.qual) & !is.na(garage.type))
df %>% filter(is.na(garage.cond) & !is.na(garage.type))
summary(as.factor(df$garage.cond))
index.garage.type <- which(is.na(df$garage.type))
df[index.garage.type, 'garage.type'] <- 'None'
index.garage.finish <- which(is.na(df$garage.finish))
df[index.garage.finish, 'garage.finish'] <- 'None'
index.garage.qual <- which(is.na(df$garage.qual))
df[index.garage.qual, 'garage.qual'] <- 'None'
index.garage.cond <- which(is.na(df$garage.cond))
df[index.garage.cond, 'garage.cond'] <- 'None'
index <- which(df$garage.cond == "")
df <- df[-index,]
ggplot(df, aes(x = as.factor(garage.cond), y = as.factor(garage.qual))) + geom_jitter(alpha = 0.2)
ggplot(df, aes(x = factor(totrms.abvgrd), y = saleprice, fill = factor(totrms.abvgrd))) + geom_boxplot() + theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none")
library(graphics)
df1 <- df %>% mutate(total.sf = total.bsmt.sf + x1st.flr.sf + x2nd.flr.sf) %>% filter(!is.na(total.sf)) %>% filter(saleprice < 650000) %>% filter(total.sf < 7500)
df1$total.flr <- ifelse(df1$total.bsmt.sf == 0 & df1$x2nd.flr.sf == 0, 1,
ifelse((df1$total.bsmt.sf == 0 & df1$x2nd.flr.sf > 0) |
(df1$total.bsmt.sf > 0 & df1$x2nd.flr.sf == 0), 2, 3))
ggplot(df1, aes(x = total.sf, y = saleprice, color = as.factor(total.flr))) + geom_point()
start <- which(colnames(df) == 'paved.drive')
end <- which(colnames(df) == 'saleprice')
colnames_paul <- colnames(df[, start:end])
colnames_paul
print(paste('Total NAs: ',sum(is.na(df[start:end]))))
colnamesWithNA_paul <- NULL
for(i in colnames_paul){
print(paste0(i,': ',sum(is.na(df[, i]))))
if(sum(is.na(df[, i])) > 0){
colnamesWithNA_paul <- append(colnamesWithNA_paul, i)
}
}
colnamesWithNA_paul
plotCategorical('fence', df)
index <- which(is.na(df$fence))
df[index, 'fence'] <- 'No Fence'
df[(df$misc.val > 0) & is.na(df$misc.feature), c('misc.feature','misc.val')]
df[(df$misc.val == 0) & ! (is.na(df$misc.feature)), c('misc.feature','misc.val')]
head(df[(df$misc.val > 0), c('misc.feature','misc.val')])
index <- which(is.na(df$misc.feature))
df[index, 'misc.feature'] <- 'No Feature'
plotCategorical('misc.feature', df)
ggplot(df, aes(x = factor(misc.feature), y = misc.val)) + geom_boxplot(aes(fill = factor(misc.feature))) + theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +  scale_y_continuous(labels = dollar)
# trim trailing blanks from sales.type
trim.trailing <- function (x) sub("\\s+$", "", x)
df$sale.type = sapply(df$sale.type,trim.trailing)
#correcting New sales type for old house ... assume WD
index.sale.type <- which(df$sale.type=="New" & df$house.age == 89)
df[index.sale.type, "sale.type"] <- "WD"
table(df$sale.condition, df$sale.type)
plotCategorical('sale.type', df)
ggplot(df, aes(x = factor(sale.type), y = saleprice)) + geom_boxplot(aes(fill = factor(sale.type))) + theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +  scale_y_continuous(labels = dollar)
t.test(df$saleprice[df$sale.type=="WD"], df$saleprice[df$sale.type=="COD"])
ggplot(subset(df, df$house.age < 6), aes(x = factor(sale.type))) + geom_bar() + facet_grid(~house.age) +
theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=8))
index <- which(df$sale.type == "WD" | df$sale.type == "CWD"| df$sale.type == "VWD"| df$sale.type == "Con"| df$sale.type ==  "ConLw" | df$sale.type ==  "ConLI"| df$sale.type == "ConLD" | df$sale.type == "Oth")
df[index, 'sale.type'] <- 'Existing'
index <- which(df$sale.type == "COD")
df <- df[-index, ]
ggplot(df, aes(x = factor(sale.type), y = saleprice)) + geom_boxplot(aes(fill = factor(sale.type))) + theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +  scale_y_continuous(labels = dollar)
index <- which(df$sale.condition == "Partial")
df[index, 'sale.condition'] <- 'Normal'
index <- which(df$sale.condition == "Alloca")
df[index, 'sale.condition'] <- 'Normal'
index <- which(df$sale.condition == "AdjLand")
df[index, 'sale.condition'] <- 'Normal'
plotCategorical('sale.condition', df)
ggplot(df, aes(x = factor(sale.condition), y = saleprice)) + geom_boxplot(aes(fill = factor(sale.condition))) + theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +  scale_y_continuous(labels = dollar)
t.test(df$saleprice[df$sale.condition=="Normal"], df$saleprice[df$sale.condition=="Abnorml"])
t.test(df$saleprice[df$sale.condition=="Normal"], df$saleprice[df$sale.condition=="Family"])
index <- which(df$sale.condition == "Abnorml")
df <- df[-index,]
index <- which(df$sale.condition == "Family")
df <- df[-index,]
df$sale.date <- as.Date(paste(df$mo.sold,c("01"),df$yr.sold, sep = "/"), "%m/%d/%Y")
ggplot(df, aes(x = factor(sale.date), y = saleprice)) + geom_boxplot(aes(fill = factor(sale.date))) + theme(axis.text.x = element_text(angle = 0, size = 10), legend.position = "none") +  scale_y_continuous(labels = dollar)
write_csv(df, "cleaned_housing.csv")
colnames(df)
str(df$condition.1)
str(df$sale.type)
levels(as.factor(df$sale.type))
levels(as.factor(df$condition.1))
knitr::opts_chunk$set(echo = TRUE)
# setwd("C:/Users/JackCrum/Documents/GitHub/DATS_Final/DATS_Final")
df <- read.csv("../cleaned_housing.csv")
train <- read.csv("../train_housing.csv")
test <- read.csv("../test_housing.csv")
test_y <- test[, "saleprice"]
i <- sapply(df, is.factor)
df[i] <- lapply(df[i], as.integer)
i <- sapply(train, is.factor)
train[i] <- lapply(train[i], as.integer)
i <- sapply(test, is.factor)
test[i] <- lapply(test[i], as.integer)
df$garage.yr.blt <- as.character(df$garage.yr.blt)
index.garage.yr.blt <- which(is.na(df$garage.yr.blt))
df[index.garage.yr.blt, 'garage.yr.blt'] <- 'No Garage'
df$garage.yr.blt <- as.factor(df$garage.yr.blt)
any(is.na(df))
sum(is.na(df))
all.model <- lm(saleprice ~ ., data = train)
summary(all.model)
pred.all <- predict(all.model, test)
RMSE.all <- sqrt(mean((pred.all - test_y)^2))
RMSE.all
model.2 <- lm(saleprice ~ ms.zoning + lot.area + street + land.contour + land.slope + neighborhood + condition.1 + condition.2 + bldg.type + house.style + overall.qual + overall.cond + year.built + roof.style + exterior.1st + exterior.2nd + mas.vnr.type + mas.vnr.area + exter.qual + bsmt.qual + bsmt.exposure + bsmtfin.sf.1 + bsmtfin.sf.2 + bsmt.unf.sf + heating.qc + x1st.flr.sf + x2nd.flr.sf + bsmt.full.bath + bsmt.half.bath + full.bath + bedroom.abvgr + functional + fireplaces + fireplace.qu + garage.yr.blt + garage.cars + garage.area + wood.deck.sf + enclosed.porch + screen.porch + misc.feature + sale.type + sale.condition + ln.lot.frontage + ln.lot.area, data = train)
summary(model.2)
pred.2 <- predict(model.2, test)
RMSE.2 <- sqrt(mean((pred.2 - test_y)^2))
RMSE.2
model.3 <- lm(saleprice ~ overall.qual + neighborhood + bldg.type + bsmt.qual + total.bsmt.sf + gr.liv.area + full.bath + half.bath + totrms.abvgrd + kitchen.qual + garage.qual + wood.deck.sf + screen.porch + misc.feature, data = train)
pred.3 <- predict(model.3, test)
RMSE.3 <- sqrt(mean((pred.3 - test_y)^2))
RMSE.3
model.4 <- lm(saleprice ~ overall.qual + total.bsmt.sf + gr.liv.area + full.bath + totrms.abvgrd, data = train)
pred.4 <- predict(model.4, test)
RMSE.4 <- sqrt(mean((pred.4 - test_y)^2))
RMSE.4
model.5 <- lm(saleprice ~ overall.qual + gr.liv.area, data = train)
pred.5 <- predict(model.5, test)
RMSE.5 <- sqrt(mean((pred.5 - test_y)^2))
RMSE.5
step.back.model <- step(all.model, direction = "backward")
summary(step.back.model)
pred.test.back <- predict(step.back.model, newdata = test)
RMSE.back <- sqrt(mean((pred.test.back - test_y)^2))
RMSE.back
step.forward.model <- step(all.model, direction = "forward")
summary(step.forward.model)
pred.test.forward <- predict(step.forward.model, newdata = test)
RMSE.forward <- sqrt(mean((pred.test.forward - test_y)^2))
RMSE.forward
library(tree)
install.packages("tree")
knitr::opts_chunk$set(echo = TRUE)
# setwd("C:/Users/JackCrum/Documents/GitHub/DATS_Final/DATS_Final")
df <- read.csv("../cleaned_housing.csv")
train <- read.csv("../train_housing.csv")
test <- read.csv("../test_housing.csv")
test_y <- test[, "saleprice"]
i <- sapply(df, is.factor)
df[i] <- lapply(df[i], as.integer)
i <- sapply(train, is.factor)
train[i] <- lapply(train[i], as.integer)
i <- sapply(test, is.factor)
test[i] <- lapply(test[i], as.integer)
df$garage.yr.blt <- as.character(df$garage.yr.blt)
index.garage.yr.blt <- which(is.na(df$garage.yr.blt))
df[index.garage.yr.blt, 'garage.yr.blt'] <- 'No Garage'
df$garage.yr.blt <- as.factor(df$garage.yr.blt)
any(is.na(df))
sum(is.na(df))
all.model <- lm(saleprice ~ ., data = train)
summary(all.model)
pred.all <- predict(all.model, test)
RMSE.all <- sqrt(mean((pred.all - test_y)^2))
RMSE.all
model.2 <- lm(saleprice ~ ms.zoning + lot.area + street + land.contour + land.slope + neighborhood + condition.1 + condition.2 + bldg.type + house.style + overall.qual + overall.cond + year.built + roof.style + exterior.1st + exterior.2nd + mas.vnr.type + mas.vnr.area + exter.qual + bsmt.qual + bsmt.exposure + bsmtfin.sf.1 + bsmtfin.sf.2 + bsmt.unf.sf + heating.qc + x1st.flr.sf + x2nd.flr.sf + bsmt.full.bath + bsmt.half.bath + full.bath + bedroom.abvgr + functional + fireplaces + fireplace.qu + garage.yr.blt + garage.cars + garage.area + wood.deck.sf + enclosed.porch + screen.porch + misc.feature + sale.type + sale.condition + ln.lot.frontage + ln.lot.area, data = train)
summary(model.2)
pred.2 <- predict(model.2, test)
RMSE.2 <- sqrt(mean((pred.2 - test_y)^2))
RMSE.2
model.3 <- lm(saleprice ~ overall.qual + neighborhood + bldg.type + bsmt.qual + total.bsmt.sf + gr.liv.area + full.bath + half.bath + totrms.abvgrd + kitchen.qual + garage.qual + wood.deck.sf + screen.porch + misc.feature, data = train)
pred.3 <- predict(model.3, test)
RMSE.3 <- sqrt(mean((pred.3 - test_y)^2))
RMSE.3
model.4 <- lm(saleprice ~ overall.qual + total.bsmt.sf + gr.liv.area + full.bath + totrms.abvgrd, data = train)
pred.4 <- predict(model.4, test)
RMSE.4 <- sqrt(mean((pred.4 - test_y)^2))
RMSE.4
model.5 <- lm(saleprice ~ overall.qual + gr.liv.area, data = train)
pred.5 <- predict(model.5, test)
RMSE.5 <- sqrt(mean((pred.5 - test_y)^2))
RMSE.5
step.back.model <- step(all.model, direction = "backward")
summary(step.back.model)
pred.test.back <- predict(step.back.model, newdata = test)
RMSE.back <- sqrt(mean((pred.test.back - test_y)^2))
RMSE.back
step.forward.model <- step(all.model, direction = "forward")
summary(step.forward.model)
pred.test.forward <- predict(step.forward.model, newdata = test)
RMSE.forward <- sqrt(mean((pred.test.forward - test_y)^2))
RMSE.forward
library(tree)
tree_model <- tree(saleprice ~ ., data = train)
tree_model
plot(tree_model)
text(tree_model, pretty = 0)
tree_pred <- predict(tree_model, test)
RMSE.tree <- sqrt(mean((tree_pred - test_y)^2))
RMSE.tree
cv_tree <- cv.tree(tree_model)
plot(cv_tree$size, cv_tree$dev, type = "b", xlab = "Tree Size", ylab = "MSE")
cv_tree$size[1]
pruned_model <- prune.tree(tree_model, best = 10)
plot(pruned_model)
text(pruned_model)
pruned_pred <- predict(pruned_model, test)
RMSE.pruned <- sqrt(mean((pruned_pred - test_y)^2))
RMSE.pruned
tree.lm.model <- lm(saleprice ~ overall.qual + gr.liv.area + bsmt.qual + total.bsmt.sf + x1st.flr.sf, data = train)
tree.lm.pred <- predict(tree.lm.model, test)
RMSE.tree.lm <- sqrt(mean((tree.lm.pred - test_y) ^ 2))
RMSE.tree.lm
RMSE.pruned - RMSE.tree.lm
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stargazer)
library(pls)
library(scales)
df <- read.csv("cleaned_housing.csv", header=TRUE)
df_train <- read.csv("train_housing.csv", header=TRUE)
df_test <- read.csv("test_housing.csv", header=TRUE)
train_h.Paul <- df_train
test_h.Paul <- df_test
df.Paul <- data.frame(Variable = character(ncol(train_h.Paul)), AdjRSquared = numeric(ncol(train_h.Paul)), stringsAsFactors = FALSE)
for(i in 1:ncol(train_h.Paul)) {
df.Paul$Variable[i]<- labels(train_h.Paul)[[2]][[i]]
df.Paul$AdjRSquared[i]<- summary(lm(as.formula(paste("saleprice ~", labels(train_h.Paul)[[2]][[i]])),data=train_h.Paul))$adj.r.squared
}
head(df.Paul[order(df.Paul$AdjRSquared,decreasing=TRUE),],20)
plot(train_h.Paul$overall.qual,train_h.Paul$saleprice)
train_h.Paul$neighborhood <- factor(train_h.Paul$neighborhood, levels = c("MeadowV" ,"IDOTRR" ,"BrDale" ,"OldTown" ,"BrkSide" ,"Edwards" ,"SWISU" ,"Sawyer" ,"NPkVill" ,"Blueste" ,"NAmes" ,"Mitchel" ,"SawyerW" ,"NWAmes" ,"Gilbert" ,"Greens" ,"Blmngtn" ,"CollgCr" ,"Crawfor" ,"ClearCr" ,"Somerst" ,"Timber" ,"Veenker" ,"NridgHt" ,"StoneBr" ,"NoRidge"))
test_h.Paul$neighborhood <- factor(test_h.Paul$neighborhood, levels = c("MeadowV" ,"IDOTRR" ,"BrDale" ,"OldTown" ,"BrkSide" ,"Edwards" ,"SWISU" ,"Sawyer" ,"NPkVill" ,"Blueste" ,"NAmes" ,"Mitchel" ,"SawyerW" ,"NWAmes" ,"Gilbert" ,"Greens" ,"Blmngtn" ,"CollgCr" ,"Crawfor" ,"ClearCr" ,"Somerst" ,"Timber" ,"Veenker" ,"NridgHt" ,"StoneBr" ,"NoRidge"))
ggplot(train_h.Paul, aes(x = neighborhood, y = saleprice)) +
geom_boxplot(fill = "#81AC9B") +
theme(axis.text.x = element_text(angle = 90, size = 8), legend.position = "none") +
scale_y_continuous(labels = dollar)
test_h.Paul$bsmt.qual = as.numeric(factor(test_h.Paul$bsmt.qual, levels = c("No Basement", "Po", "Fa", "TA", "Gd", "Ex")))
train_h.Paul$bsmt.qual = as.numeric(factor(train_h.Paul$bsmt.qual, levels = c("No Basement", "Po", "Fa", "TA", "Gd", "Ex")))
test_h.Paul$exter.qual = as.numeric(factor(test_h.Paul$exter.qual, levels = c("Po", "Fa", "TA", "Gd", "Ex")))
train_h.Paul$exter.qual = as.numeric(factor(train_h.Paul$exter.qual, levels = c("Po", "Fa", "TA", "Gd", "Ex")))
test_h.Paul$kitchen.qual = as.numeric(factor(test_h.Paul$kitchen.qual, levels = c("Po", "Fa", "TA", "Gd", "Ex")))
train_h.Paul$kitchen.qual = as.numeric(factor(train_h.Paul$kitchen.qual, levels = c("Po", "Fa", "TA", "Gd", "Ex")))
test_h.Paul$garage.finish = as.numeric(factor(test_h.Paul$garage.finish, levels = c("None", "Unf", "RFn", "Fin")))
train_h.Paul$garage.finish = as.numeric(factor(train_h.Paul$garage.finish, levels = c("None", "Unf", "RFn", "Fin")))
test_h.Paul$fireplace.qu = as.numeric(factor(test_h.Paul$fireplace.qu, levels = c("No Fireplace", "Po", "Fa", "TA", "Gd", "Ex")))
train_h.Paul$fireplace.qu = as.numeric(factor(train_h.Paul$fireplace.qu, levels = c("No Fireplace", "Po", "Fa", "TA", "Gd", "Ex")))
model.Paul<-lm(saleprice~neighborhood +
bsmt.qual +
total.bsmt.sf +
gr.liv.area +
exter.qual +
kitchen.qual +
garage.area +
garage.finish +
fireplace.qu +
yrs.since.remod +
ln.lot.area
, data = train_h.Paul )
summary(model.Paul)
p1.Paul <- predict(model.Paul, test_h.Paul)
d.Paul.p1 <- data.frame(p1.Paul, test_h.Paul$saleprice)
saleprice_MSE.1 <- mean((d.Paul.p1[,1]-d.Paul.p1[,2])^2, na.rm=TRUE)
saleprice_RMSE.1 <- sqrt(saleprice_MSE.1)
saleprice_RMSE.1
model.Paul2<-lm(saleprice~overall.qual +
neighborhood +
bsmt.qual +
total.bsmt.sf +
gr.liv.area +
exter.qual +
kitchen.qual +
garage.area +
fireplace.qu +
yrs.since.remod     , data = train_h.Paul )
summary(model.Paul2)
Paul2 <- predict(model.Paul2, test_h.Paul)
dPaul.p2 <- data.frame(Paul2, test_h.Paul$saleprice)
saleprice_MSE.1 <- mean((dPaul.p2[,1]-dPaul.p2[,2])^2, na.rm=TRUE)
saleprice_RMSE.1 <- sqrt(saleprice_MSE.1)
saleprice_RMSE.1
df_train_num <- df_train
for(i in colnames(df_train)){
if(is.factor( df_train[[i]] )){
df_train_num[[i]] <- NULL
}
}
pcr.saleprice <- pcr(saleprice ~ ., data=df_train_num, scale=TRUE, validation="CV")
validationplot(pcr.saleprice)
summary(pcr.saleprice)
pcr.predict.1 <- predict(pcr.saleprice, df_test, ncomp=1)
df_predict.1 <- data.frame(pcr.predict.1, df_test$saleprice)
saleprice_MSE.1 <- mean((df_predict.1[,1]-df_predict.1[,2])^2)
saleprice_RMSE.1 <- sqrt(saleprice_MSE.1)
pcr.predict.2 <- predict(pcr.saleprice, df_test, ncomp=7)
df_predict.2 <- data.frame(pcr.predict.2, df_test$saleprice)
saleprice_MSE.2 <- mean((df_predict.2[,1]-df_predict.2[,2])^2)
saleprice_RMSE.2 <- sqrt(saleprice_MSE.2)
pcr.predict.3 <- predict(pcr.saleprice, df_test, ncomp=24)
df_predict.3 <- data.frame(pcr.predict.3, df_test$saleprice)
saleprice_MSE.3 <- mean((df_predict.3[,1]-df_predict.3[,2])^2)
saleprice_RMSE.3 <- sqrt(saleprice_MSE.3)
stargazer(df_predict.1, df_predict.2, df_predict.3, type="text")
