names(df)
model.2 <- lm(saleprice ~ ms.zoning + lot.area + street + land.contour + land.slope + neighborhood + condition.1 + condition.2 + bldg.type + house.style + overall.qual + overall.cond + year.built + roof.style + exterior.1st + exterior.2nd + mas.vnr.type + mas.vnr.area + exter.qual + bsmt.qual + bsmt.exposure + bsmtfin.sf.1 + bsmtfin.sf.2 + bsmt.unf.sf + heating.qc + x1st.flr.sf + x2nd.flr.sf + bsmt.full.bath + bsmt.half.bath + full.bath + bedroom.abvgr + functional + fireplaces + fireplace.qu + garage.yr.blt + garage.cars + garage.area + wood.deck.sf + enclosed.porch + screen.porch + misc.feature + sale.type + sale.condition + ln.lot.frontage + ln.lot.area, data = train)
summary(model.2)
library(VIF)
pred.2 <- predict(model.2, test)
RMSE.2 <- sqrt(mean((pred.2 - test_y)^2))
RMSE.2
RMSE.all
RMSE.2
names(Df)
names(df)
summary(all.model)
summary(all.model)
step(all.model, direction = "backward")
step.back.model <- step(all.model, direction = "backward")
summary(step.back.model)
pred.test.back <- predict(step.back.model, newdata = test)
RMSE.back <- sqrt(mean((pred.test.back - test)^2))
RMSE.back
RMSE.back <- sqrt(mean((pred.test.back - test_y)^2))
RMSE.back
summary(all.model)
pred.3 <- predict(model.3, test)
model.3 <- lm(saleprice ~ overall.qual + neighborhood + bldg.type + bsmt.qual + total.bsmt.sf + gr.liv.area + full.bath + half.bath + totrms.abvgrd + kitchen.qual + garage.qual + wood.deck.sf + screen.porch + misc.feature, data = train)
pred.3 <- predict(model.3, test)
RMSE.3 < sqrt(mean((pred.3 - test_y)^2))
RMSE.3 <- sqrt(mean((pred.3 - test_y)^2))
RMSE.3
model.4 <- lm(saleprice ~ overall.qual, data = train)
pred.4 <- predict(model.4, test)
RMSE.4 <- sqrt(mean((pred.4 - test_y)^2))
RMSE.4
model.4 <- lm(saleprice ~ overall.qual + total.bsmt.sf + gr.liv.area + full.bath + totrms.abvgrd, data = train)
pred.4 <- predict(model.4, test)
RMSE.4 <- sqrt(mean((pred.4 - test_y)^2))
RMSE.4
VIF(all.model)
vif(all.model)
vif(train$car.area)
step(all.model, direction = "forward")
summary(step.forward.model)
step.forward.model <- step(all.model, direction = "forward")
summary(step.forward.model)
pred.test.forward <- predict(step.forward.model, newdata = test)
RMSE.forward <- sqrt(mean((pred.test.forward - test_y)^2))
RMSE.forward
pred.test.forward <- predict(step.forward.model, newdata = test)
RMSE.forward <- sqrt(mean((pred.test.forward - test_y)^2))
RMSE.forward
model_list <- list(m.all = all.model, m.2 = model.2, m.3 = model.3, m.4 = model.4, backward = step.back.model, forward = step.forward.model, tree = tree_model, pruned = pruned_model, tree.lm = tree.lm.model)
model_list_lm <- list(m.all = all.model, m.2 = model.2, m.3 = model.3, m.4 = model.4, backward = step.back.model, forward = step.forward.model, tree = tree_model, pruned = pruned_model, tree.lm = tree.lm.model)
resamples <- resamples(model_list_lm)
library(caret)
resamples_lm <- resamples(model_list_lm)
bwplot(model_list_lm, metric = "RMSE")
anova(all.model, model.2, model.3, model.4, step.back.model, step.forward.model, tree_model, pruned_model, tree.lm.model)
model.5 <- lm(saleprice ~ overall.qual + gr.liv.area, data = train)
pred.5 <- predict(model.5, test)
RMSE.5 <- sqrt(mean((pred.5 - test_y)^2))
RMSE.5
pruned_model <- prune.tree(tree_model, best = 40))
pruned_model <- prune.tree(tree_model, best = 40)
pruned_model <- prune.tree(tree_model, best = 40)
plot(pruned_model)
pruned_model <- prune.tree(tree_model, best = 10)
model.3 <- lm(saleprice ~ overall.qual + neighborhood + bldg.type + bsmt.qual + total.bsmt.sf + gr.liv.area + full.bath + half.bath + totrms.abvgrd + kitchen.qual + garage.qual + garage.area + wood.deck.sf + screen.porch + misc.feature, data = train)
pred.3 <- predict(model.3, test)
RMSE.3 <- sqrt(mean((pred.3 - test_y)^2))
RMSE.3
tree_pred <- predict(tree_model, test)
RMSE.tree <- sqrt(mean((tree_pred - test_y)^2))
RMSE.tree
df_pred_all <- data.frame(pred.all)
df_pred2 <- data.frame(pred.2)
df_pred3 <- data.frame(pred.3)
df_pred4 <- data.frame(pred.4)
df_pred5 <- data.frame(pred.4)
df_back <- data.frame(pred.test.back)
df_forward <- data.frame(pred.test.back)
df_tree <- data.frame(tree_pred)
df_prune <- data.frame(pruned_pred)
df_tree_lm <- data.frame(tree.lm.pred)
install.packages("stargazer")
library(stargazer)
stargazer(df_pred_all, df_pred2, df_pred3, df_pred4, df_pred5, df_back, df_forward, df_tree, df_prune, df_tree_lm, type="text")
library(leaps)
leaps < regsubsets(saleprice., data = train, nbest=10)
leaps < regsubsets(saleprice ~ ., data = train, nbest=10)
leaps < regsubsets(saleprice ~ ., data = train, nbest=10)
reg.best <- regsubsets(saleprice~., data = train, nvmax = 82)
summary(all.model)
library(MASS)
step <- stepAIC(all.model, direction = "both")
pred.step <- predict(step, test)
pred.step <- predict(step, test)
RMSE.step <- sqrt(mean((pred.step - test_y)^2))
RMSE.step
step.forward.model <- step(all.model, direction = "forward")
summary(step.forward.model)
pred.test.forward <- predict(step.forward.model, newdata = test)
RMSE.forward <- sqrt(mean((pred.test.forward - test_y)^2))
RMSE.forward
step.forward.model <- step(all.model, direction = "forward")
step <- stepAIC(all.model, direction = "forward")
step <- stepAIC(lm(saleprice~., train), direction = "forward")
summary(all.model)
summary(model.2)
summary(model.3)
RMSE.3
plot(step.back.model)
print(step.back.model)
plot(step.back.model)
print(min(step.back.model$results$RMSE))
summary(all.model)
knitr::opts_chunk$set(echo = TRUE)
plot(all.model)
plot(all.model)
plot(model.2)
plot(model.3)
plot(model.4)
plot(model.5)
plot(model.5)
summary(model.2)
tree_model <- tree(saleprice ~ ., data = train)
tree_model
plot(tree_model)
text(tree_model, pretty = 0)
tree_pred <- predict(tree_model, test)
RMSE.tree <- sqrt(mean((tree_pred - test_y)^2))
RMSE.tree
cv_tree <- cv.tree(tree_model)
plot(cv_tree$size, cv_tree$dev, type = "b", xlab = "Tree Size", ylab = "MSE")
cv_tree$size[1]
install.packages("partykit")# Alternative decision tree algorithm
library(rpart)				        # Popular decision tree algorithm
library(rattle)					# Fancy tree plot
library(rpart.plot)				# Enhanced tree plots
library(RColorBrewer)				# Color selection for fancy tree plot
library(party)
#install.packages("partykit")# Alternative decision tree algorithm
library(partykit)				# Convert rpart object to BinaryTree
library(caret)
tree.1 <- rpart(tree_model, data = train,control=rpart.control(minsplit=30,cp=0))
#
plot(tree.1)					# Will make a mess of the plot
text(tree.1)
tree.1 <- rpart(tree_model, data = train,control=rpart.control(minsplit=20,cp=0))
#
plot(tree.1)					# Will make a mess of the plot
text(tree.1)
prp(tree.1)					# Will plot the tree
prp(tree.1,varlen=3)
new.tree.1 <- prp(tree.1,snip=TRUE)$obj # interactively trim the tree
prp(new.tree.1) # display the new tree
tree.1 <- rpart(tree_model, data = train,control=rpart.control(minsplit=10,cp=0))
#
plot(tree.1)					# Will make a mess of the plot
text(tree.1)
#
prp(tree.1)					# Will plot the tree
prp(tree.1,varlen=3)				# Shorten variable names
# Interatively prune the tree
new.tree.1 <- prp(tree.1,snip=TRUE)$obj # interactively trim the tree
prp(new.tree.1)
plot(tree.1)					# Will make a mess of the plot
text(tree.1)
#
prp(tree.1)					# Will plot the tree
prp(tree.1,varlen=3)				# Shorten variable names
# Interatively prune the tree
new.tree.1 <- prp(tree.1,snip=TRUE)$obj # interactively trim the tree
prp(new.tree.1) # display the new t
tree.1 <- rpart(saleprice ~ ., data = train, control=rpart.control(minsplit=10,cp=0))
plot(tree.1)					# Will make a mess of the plot
text(tree.1)
prp(tree.1)					# Will plot the tree
prp(tree.1,varlen=3)
new.tree.1 <- prp(tree.1,snip=TRUE)$obj # interactively trim the tree
prp(new.tree.1) # display the new tree
tree.2 <- rpart(saleprice ~. , train)			# A more reasonable tree
prp(tree.2)                                     # A fast plot
fancyRpartPlot(tree.2)				# A fancy plot from rattle
fancyRpartPlot(cv_tree)
fancyRpartPlot(tree_model)
plot(tree_model)
plot(tree_model)
text(tree_model, pretty = 0)
text(tree_model, pretty = 10)
plot(tree_model)
text(tree_model, pretty = 10
plot(tree_model)
plot(tree_model)
text(tree_model, pretty = 0)
tree_model <- tree(saleprice ~ ., data = train, method = "recursive.partition")
tree_model
plot(tree_model)
text(tree_model, pretty = 0)
tree_pred <- predict(tree_model, test)
RMSE.tree <- sqrt(mean((tree_pred - test_y)^2))
RMSE.tree
cv_tree <- cv.tree(tree_model)
plot(cv_tree$size, cv_tree$dev, type = "b", xlab = "Tree Size", ylab = "MSE")
cv_tree$size[1]
library(tree)
tree_model <- tree(saleprice ~ ., data = train, method = "recursive.partition")
tree_model
plot(tree_model)
text(tree_model, pretty = 0)
tree_pred <- predict(tree_model, test)
RMSE.tree <- sqrt(mean((tree_pred - test_y)^2))
RMSE.tree
cv_tree <- cv.tree(tree_model)
plot(cv_tree$size, cv_tree$dev, type = "b", xlab = "Tree Size", ylab = "MSE")
cv_tree$size[1]
tree_model <- tree(saleprice ~ ., data = train, method = "recursive.partition")
tree_model
plot(tree_model)
text(tree_model, pretty = 0)
cv_tree <- cv.tree(tree_model)
plot(cv_tree$size, cv_tree$dev, type = "b", xlab = "Tree Size", ylab = "MSE")
cv_tree$size[1]
stargazer(all.model, model.2, model.3, model.4, model.5, step.back.model, step.forward.model, tree_model, type="text", style="apsr")
model.3 <- lm(saleprice ~ overall.qual + neighborhood + bldg.type + bsmt.qual + total.bsmt.sf + gr.liv.area + full.bath + half.bath + totrms.abvgrd + kitchen.qual + garage.qual + garage.area + wood.deck.sf + screen.porch + misc.feature, data = train)
summary(model.3)
plot(model.3)
pred.3 <- predict(model.3, test)
RMSE.3 <- sqrt(mean((pred.3 - test_y)^2))
RMSE.3
model.3 <- lm(saleprice ~ overall.qual + neighborhood + bldg.type + bsmt.qual + total.bsmt.sf + gr.liv.area + full.bath + half.bath + totrms.abvgrd + kitchen.qual + garage.qual + garage.area + wood.deck.sf + screen.porch + misc.feature, data = train)
summary(model.3)
plot(model.3)
pred.3 <- predict(model.3, test)
RMSE.3 <- sqrt(mean((pred.3 - test_y)^2))
RMSE.3
model.4 <- lm(saleprice ~ overall.qual + total.bsmt.sf + gr.liv.area + totrms.abvgrd, data = train)
plot(model.4)
pred.4 <- predict(model.4, test)
RMSE.4 <- sqrt(mean((pred.4 - test_y)^2))
RMSE.4
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stargazer)
library(pls)
library(scales)
plot(step.forward.model)
plot(all.model)
d <- density(all.model$residuals)
plot(d)
polygon(d, col="red", border="blue")
plot(d)
polygon(d, col="red", border="blue")
d <- density(model_tree$residuals)
d <- density(tree_model$residuals)
d <- density(model.3$residuals)
plot(d, main="Residual Density Distribution")
polygon(d, col="red", border="blue")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stargazer)
library(pls)
library(scales)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stargazer)
library(pls)
library(scales)
df <- read.csv("cleaned_housing.csv", header = TRUE)
df_train <- read.csv("train_housing.csv", header = TRUE)
df_test <- read.csv("test_housing.csv", header = TRUE)
test_y <- df_test[, "saleprice"]
i <- sapply(df, is.factor)
df[i] <- lapply(df[i], as.integer)
i <- sapply(df_train, is.factor)
df_train[i] <- lapply(df_train[i], as.integer)
i <- sapply(test, is.factor)
test_y <- df_test[, "saleprice"]
i <- sapply(df, is.factor)
df[i] <- lapply(df[i], as.integer)
i <- sapply(df_train, is.factor)
df_train[i] <- lapply(df_train[i], as.integer)
i <- sapply(df_test, is.factor)
df_test[i] <- lapply(df_test[i], as.integer)
all.model <- lm(saleprice ~ ., data = df_train)
summary(all.model)
plot(all.model)
pred.all <- predict(all.model, df_test)
RMSE.all <- sqrt(mean((pred.all - test_y)^2))
RMSE.all
model.2 <- lm(saleprice ~ ms.zoning + lot.area + street + land.contour + land.slope + neighborhood + condition.1 + condition.2 + bldg.type + house.style + overall.qual + overall.cond + year.built + roof.style + exterior.1st + exterior.2nd + mas.vnr.type + mas.vnr.area + exter.qual + bsmt.qual + bsmt.exposure + bsmtfin.sf.1 + bsmtfin.sf.2 + bsmt.unf.sf + heating.qc + x1st.flr.sf + x2nd.flr.sf + bsmt.full.bath + bsmt.half.bath + full.bath + bedroom.abvgr + functional + fireplaces + fireplace.qu + garage.yr.blt + garage.cars + garage.area + wood.deck.sf + enclosed.porch + screen.porch + misc.feature + sale.type + sale.condition + ln.lot.frontage + ln.lot.area, data = df_train)
summary(model.2)
plot(model.2)
pred.2 <- predict(model.2, df_test)
RMSE.2 <- sqrt(mean((pred.2 - test_y)^2))
RMSE.2
model.3 <- lm(saleprice ~ overall.qual + neighborhood + bldg.type + bsmt.qual + total.bsmt.sf + gr.liv.area + full.bath + half.bath + totrms.abvgrd + kitchen.qual + garage.qual + garage.area + wood.deck.sf + screen.porch + misc.feature, data = df_train)
summary(model.3)
plot(model.3)
pred.3 <- predict(model.3, df_test)
RMSE.3 <- sqrt(mean((pred.3 - test_y)^2))
RMSE.3
model.4 <- lm(saleprice ~ overall.qual + total.bsmt.sf + gr.liv.area + totrms.abvgrd, data = df_train)
summary(model.4)
plot(model.4)
pred.4 <- predict(model.4, df_test)
RMSE.4 <- sqrt(mean((pred.4 - test_y)^2))
RMSE.4
step.back.model <- step(all.model, direction = "backward")
summary(step.back.model)
pred.test.back <- predict(step.back.model, newdata = df_test)
RMSE.back <- sqrt(mean((pred.test.back - test_y)^2))
RMSE.back
step.forward.model <- step(all.model, direction = "forward")
summary(step.forward.model)
pred.test.forward <- predict(step.forward.model, newdata = df_test)
RMSE.forward <- sqrt(mean((pred.test.forward - test_y)^2))
RMSE.forward
library(tree)
tree_model <- tree(saleprice ~ ., data = df_train, method = "recursive.partition")
plot(tree_model)
text(tree_model, pretty = 0)
tree_pred <- predict(tree_model, df_test)
RMSE.tree <- sqrt(mean((tree_pred - test_y)^2))
RMSE.tree
cv_tree <- cv.tree(tree_model)
plot(cv_tree$size, cv_tree$dev, type = "b", xlab = "Tree Size", ylab = "MSE")
cv_tree$size[1]
cor(train)
str(train)
str(train)
train <- read.csv("train_housing.csv")
setwd("C:/Users/JackCrum/Documents/GitHub/DATS_Final/DATS_Final")
df <- read.csv("cleaned_housing.csv")
train <- read.csv("train_housing.csv")
str(train)
cor(train)
setwd("C:/Users/JackCrum/Documents/GitHub/DATS_Final/DATS_Final")
df <- read.csv("cleaned_housing.csv")
train <- read.csv("train_housing.csv")
test <- read.csv("test_housing.csv")
test_y <- test[, "saleprice"]
i <- sapply(df, is.factor)
df[i] <- lapply(df[i], as.integer)
i <- sapply(train, is.factor)
train[i] <- lapply(train[i], as.integer)
i <- sapply(test, is.factor)
test[i] <- lapply(test[i], as.integer)
cor(train)
str(train)
cor(train$garage.cars, train)
summary(all.model)
cor(train$total.bsmt.sf, train)
a <- cor(train)
str(a)
a <- data.frame(cor(train))
str(a)
corrplot(train)
rcorr(train)
options(max.print=1000000)
cor(train)
round(cor(train), 2)
library(car)
vif(all.model)
alias(all.model)
alias(all.model, complete = TRUE, partial = FALSE, partial.pattern = FALSE)
alias(all.model, complete = TRUE, partial = TRUE, partial.pattern = FALSE)
alias(all.model, complete = TRUE, partial = FALSE, partial.pattern = FALSE)
vif(model.2)
vif(model.3)
library(car)
alias(all.model, complete = TRUE, partial = FALSE, partial.pattern = FALSE)
vif(model.4)
vif(model.3)
knitr::opts_chunk$set(echo = TRUE)
model.rf.3 <- train(
saleprice ~ .,
tuneLength = 10,
data = df, method = "ranger",
trControl = trainControl(method = "cv", number = 4, verboseIter = TRUE)
)
plot(model.rf.3)
names(model.rf.3)
levels(model.rf.3)
(model.rf.3$levels)
model.rf.3$levels
model.rf.3$metric
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stargazer)
library(pls)
library(scales)
library(car)
df <- read.csv("cleaned_housing.csv", header = TRUE)
df_train <- read.csv("train_housing.csv", header = TRUE)
df_test <- read.csv("test_housing.csv", header = TRUE)
test_y <- df_test[, "saleprice"]
i <- sapply(df, is.factor)
df[i] <- lapply(df[i], as.integer)
i <- sapply(df_train, is.factor)
df_train[i] <- lapply(df_train[i], as.integer)
i <- sapply(df_test, is.factor)
df_test[i] <- lapply(df_test[i], as.integer)
all.model <- lm(saleprice ~ ., data = df_train)
summary(all.model)
plot(all.model)
pred.all <- predict(all.model, df_test)
RMSE.all <- sqrt(mean((pred.all - test_y)^2))
RMSE.all
alias(all.model, complete = TRUE, partial = FALSE, partial.pattern = FALSE)
model.2 <- lm(saleprice ~ ms.zoning + lot.area + street + land.contour + land.slope + neighborhood + condition.1 + condition.2 + bldg.type + house.style + overall.qual + overall.cond + year.built + roof.style + exterior.1st + exterior.2nd + mas.vnr.type + mas.vnr.area + exter.qual + bsmt.qual + bsmt.exposure + bsmtfin.sf.1 + bsmtfin.sf.2 + bsmt.unf.sf + heating.qc + x1st.flr.sf + x2nd.flr.sf + bsmt.full.bath + bsmt.half.bath + full.bath + bedroom.abvgr + functional + fireplaces + fireplace.qu + garage.yr.blt + garage.cars + garage.area + wood.deck.sf + enclosed.porch + screen.porch + misc.feature + sale.type + sale.condition + ln.lot.frontage + ln.lot.area, data = df_train)
summary(model.2)
plot(model.2)
pred.2 <- predict(model.2, df_test)
RMSE.2 <- sqrt(mean((pred.2 - test_y)^2))
RMSE.2
vif(model.2)
model.3 <- lm(saleprice ~ overall.qual + neighborhood + bldg.type + bsmt.qual + total.bsmt.sf + gr.liv.area + full.bath + half.bath + totrms.abvgrd + kitchen.qual + garage.qual + garage.area + wood.deck.sf + screen.porch + misc.feature, data = df_train)
summary(model.3)
plot(model.3)
pred.3 <- predict(model.3, df_test)
RMSE.3 <- sqrt(mean((pred.3 - test_y)^2))
RMSE.3
vif(model.3)
model.4 <- lm(saleprice ~ overall.qual + total.bsmt.sf + gr.liv.area + totrms.abvgrd, data = df_train)
summary(model.4)
plot(model.4)
pred.4 <- predict(model.4, df_test)
RMSE.4 <- sqrt(mean((pred.4 - test_y)^2))
RMSE.4
vif(model.4)
step.back.model <- step(all.model, direction = "backward")
summary(step.back.model)
pred.test.back <- predict(step.back.model, newdata = df_test)
RMSE.back <- sqrt(mean((pred.test.back - test_y)^2))
RMSE.back
step.forward.model <- step(all.model, direction = "forward")
summary(step.forward.model)
pred.test.forward <- predict(step.forward.model, newdata = df_test)
RMSE.forward <- sqrt(mean((pred.test.forward - test_y)^2))
RMSE.forward
library(tree)
tree_model <- tree(saleprice ~ ., data = df_train, method = "recursive.partition")
plot(tree_model)
text(tree_model, pretty = 0)
tree_pred <- predict(tree_model, df_test)
RMSE.tree <- sqrt(mean((tree_pred - test_y)^2))
RMSE.tree
cv_tree <- cv.tree(tree_model)
plot(cv_tree$size, cv_tree$dev, type = "b", xlab = "Tree Size", ylab = "MSE")
cv_tree$size[1]
train_h.Paul <- df_train
test_h.Paul <- df_test
df.Paul <- data.frame(Variable = character(ncol(train_h.Paul)), AdjRSquared = numeric(ncol(train_h.Paul)), stringsAsFactors = FALSE)
for(i in 1:ncol(train_h.Paul)) {
df.Paul$Variable[i]<- labels(train_h.Paul)[[2]][[i]]
df.Paul$AdjRSquared[i]<- summary(lm(as.formula(paste("saleprice ~", labels(train_h.Paul)[[2]][[i]])),data=train_h.Paul))$adj.r.squared
}
head(df.Paul[order(df.Paul$AdjRSquared,decreasing=TRUE),],20)
plot(train_h.Paul$overall.qual,train_h.Paul$saleprice)
train_h.Paul$neighborhood <- factor(train_h.Paul$neighborhood, levels = c("MeadowV" ,"IDOTRR" ,"BrDale" ,"OldTown" ,"BrkSide" ,"Edwards" ,"SWISU" ,"Sawyer" ,"NPkVill" ,"Blueste" ,"NAmes" ,"Mitchel" ,"SawyerW" ,"NWAmes" ,"Gilbert" ,"Greens" ,"Blmngtn" ,"CollgCr" ,"Crawfor" ,"ClearCr" ,"Somerst" ,"Timber" ,"Veenker" ,"NridgHt" ,"StoneBr" ,"NoRidge"))
test_h.Paul$neighborhood <- factor(test_h.Paul$neighborhood, levels = c("MeadowV" ,"IDOTRR" ,"BrDale" ,"OldTown" ,"BrkSide" ,"Edwards" ,"SWISU" ,"Sawyer" ,"NPkVill" ,"Blueste" ,"NAmes" ,"Mitchel" ,"SawyerW" ,"NWAmes" ,"Gilbert" ,"Greens" ,"Blmngtn" ,"CollgCr" ,"Crawfor" ,"ClearCr" ,"Somerst" ,"Timber" ,"Veenker" ,"NridgHt" ,"StoneBr" ,"NoRidge"))
ggplot(train_h.Paul, aes(x = neighborhood, y = saleprice)) +
geom_boxplot(fill = "#81AC9B") +
theme(axis.text.x = element_text(angle = 90, size = 8), legend.position = "none") +
scale_y_continuous(labels = dollar)
test_h.Paul$bsmt.qual = as.numeric(factor(test_h.Paul$bsmt.qual, levels = c("No Basement", "Po", "Fa", "TA", "Gd", "Ex")))
train_h.Paul$bsmt.qual = as.numeric(factor(train_h.Paul$bsmt.qual, levels = c("No Basement", "Po", "Fa", "TA", "Gd", "Ex")))
test_h.Paul$exter.qual = as.numeric(factor(test_h.Paul$exter.qual, levels = c("Po", "Fa", "TA", "Gd", "Ex")))
train_h.Paul$exter.qual = as.numeric(factor(train_h.Paul$exter.qual, levels = c("Po", "Fa", "TA", "Gd", "Ex")))
test_h.Paul$kitchen.qual = as.numeric(factor(test_h.Paul$kitchen.qual, levels = c("Po", "Fa", "TA", "Gd", "Ex")))
train_h.Paul$kitchen.qual = as.numeric(factor(train_h.Paul$kitchen.qual, levels = c("Po", "Fa", "TA", "Gd", "Ex")))
test_h.Paul$garage.finish = as.numeric(factor(test_h.Paul$garage.finish, levels = c("None", "Unf", "RFn", "Fin")))
train_h.Paul$garage.finish = as.numeric(factor(train_h.Paul$garage.finish, levels = c("None", "Unf", "RFn", "Fin")))
test_h.Paul$fireplace.qu = as.numeric(factor(test_h.Paul$fireplace.qu, levels = c("No Fireplace", "Po", "Fa", "TA", "Gd", "Ex")))
train_h.Paul$fireplace.qu = as.numeric(factor(train_h.Paul$fireplace.qu, levels = c("No Fireplace", "Po", "Fa", "TA", "Gd", "Ex")))
model.Paul<-lm(saleprice~neighborhood +
bsmt.qual +
total.bsmt.sf +
gr.liv.area +
exter.qual +
kitchen.qual +
garage.area +
garage.finish +
fireplace.qu +
yrs.since.remod +
ln.lot.area
, data = train_h.Paul )
plot(model.2$fitted.values, model.2$residuals)
plot(model.2)
plot(model.3)
plot(model.4)
plot(model.3)
summary(model.2)
model.3 <- lm(saleprice ~ overall.qual + neighborhood + bldg.type + bsmt.qual + total.bsmt.sf + gr.liv.area + full.bath + half.bath + totrms.abvgrd + kitchen.qual + garage.qual + garage.area + wood.deck.sf + screen.porch + misc.feature, data = train)
summary(model.3)
vif(model.3)
plot(model.3)
pred.3 <- predict(model.3, test)
RMSE.3 <- sqrt(mean((pred.3 - test_y)^2))
RMSE.3
model.4 <- lm(saleprice ~ overall.qual + total.bsmt.sf + gr.liv.area + totrms.abvgrd, data = train)
summary(model.4)
plot(model.4)
pred.4 <- predict(model.4, test)
RMSE.4 <- sqrt(mean((pred.4 - test_y)^2))
RMSE.4
summary(step.back.model)
summary(step.forward.model)
RMSE.back
summary(step.back.model)
summary(step.forward.model)
RMSE.forward
summary(step.forward.model)
